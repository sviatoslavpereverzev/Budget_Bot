# -*- coding: utf-8 -*-
import os
import re
import logging
import requests
import json
import calendar
from datetime import datetime
from configparser import ConfigParser

import telebot
from telebot import types

from database import DB


# –¥–æ–ø–∏—Å–∞—Ç—å help_data


class BudgetBot(telebot.TeleBot):
    def __init__(self):

        self.config = ConfigParser()
        self.config.read(os.path.dirname(os.path.abspath(__file__)) + '/app.ini')
        token = self.config.get('BUDGET_BOT', 'token')
        super().__init__(token)

        # database object
        self.db = None

        # maximum number of categories
        self.max_len_category = None
        # maximum number of subcategories
        self.max_len_subcategory = None

        # email bot to which to open access to the table
        self.email_budget_bot = None

        self.set_settings()

    def set_settings(self):
        self.db = DB()
        self.max_len_category = self.config.getint('BUDGET_BOT', 'max_len_category')
        self.max_len_subcategory = self.config.getint('BUDGET_BOT', 'max_len_subcategory')
        self.email_budget_bot = self.config.get('SHEETS_API', 'email_budget_bot')

    def keyboard(self, message, message_text, buttons, callback_key, previous_data, qt_key=3):
        """
        Keyboard for all methods

        Args:
            message (telebot.types.Message): Telebot object
            message_text (str): Text above the keyboard
            buttons (dict): Dictionary of buttons, where the key is the button identifier
            and the value is the name of the button
            callback_key (str): Key for keyback button
            previous_data (json): The date that came and is completed by the callback
            qt_key (int): Number of buttons in a row

        """

        callback = json.loads(previous_data, encoding='utf-8')
        list_keys = []
        keyboard = types.InlineKeyboardMarkup(row_width=qt_key)
        for button_id, button_name in buttons.items():
            callback[callback_key] = button_id
            callback_data_ = json.dumps(callback)
            list_keys.append(types.InlineKeyboardButton(button_name, callback_data=callback_data_))
        keyboard.add(*list_keys)
        self.send_message(message.chat.id, message_text, reply_markup=keyboard)

    def add(self, message):
        """Select income and expense categories"""

        try:
            self.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except:
            pass
        data = json.dumps({'f': 'amount'})
        categories = self.db.get_category(message.from_user.id)
        buttons_name = {button_id: button_name.get('name', 'Name Error') for button_id, button_name in
                        categories.items()}
        self.keyboard(message, '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', buttons_name, callback_key='cat', previous_data=data)

    def settings(self, message):
        """Select Settings categories"""

        self.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        data = json.dumps({'f': 'set_stng'})
        buttons_name = {1: '–î–æ–±–∞–≤–∏—Ç—å', 2: '–£–¥–∞–ª–∏—Ç—å', 3: '–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É',
                        4: '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É', 5: '–û—Ç–º–µ–Ω–∞'}
        self.keyboard(message, '–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', buttons_name, callback_key='cat', previous_data=data, qt_key=1, )

    def report(self, message):
        """Select report categories"""

        self.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        data = json.dumps({'f': 'get_rp'})
        buttons_name = {1: '–î–µ–Ω—å', 2: '–ù–µ–¥–µ–ª—è', 3: '–ú–µ—Å—è—Ü', 4: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü'}
        self.keyboard(message, '–û—Ç—á–µ—Ç –∑–∞:', buttons_name, callback_key='cat', previous_data=data, qt_key=1, )

    def start(self, message):
        """Adding a user to the database and welcome with user"""

        user_name = message.from_user.first_name
        user_name = '' if not user_name or user_name == 'None' else f', {user_name} '
        if not self.db.is_user(message.from_user.id):
            if self.db.add_user(message):
                message_text = f'–ü—Ä–∏–≤–µ—Ç{user_name}üëã\nBudget Bot –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–π –±—é–¥–∂–µ—Ç üí∏\n' + \
                               '–í—Å–µ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Ç–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é Google –¢–∞–±–ª–∏—Ü—É üòé\n' \
                               '–¢—ã –º–æ–∂–µ—à—å —Å—Ç—Ä–æ–∏—Ç—å –ª—é–±—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏, —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –¥–µ–ª–∞—Ç—å —Ä–∞—Å—á–µ—Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä—è –¥–∞–Ω–Ω—ã–º, ' \
                               '–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤ –Ω–µ—ë –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è.\n' \
                               '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–± –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–≤–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É \help.\n\n' \
                               '–ò –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–∫ —Ü–∏—Ç–∞—Ç–∞ –î—ç–π–≤–∞ –†—ç–º—Å–∏:\n' \
                               '¬´–ò–ª–∏ —Ç—ã –±—É–¥–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –¥–µ–Ω—å–≥–∞–º–∏, –∏–ª–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–±–æ–π.¬ª'
                self.send_message(chat_id=message.chat.id, text=message_text)
        else:
            message_text = f'–ò —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç{user_name}üëã\n–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É \help.'
            self.send_message(chat_id=message.chat.id, text=message_text)

    def help(self, message):
        """Select categories for help the user"""

        self.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        data = json.dumps({'f': 'help'})
        buttons_name = {1: '–î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω Budget Bot?',
                        2: '–ß—Ç–æ –æ–Ω –º–æ–∂–µ—Ç?',
                        3: '–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å Google –¢–∞–±–ª–∏—Ü—É –Ω–∞ –¥—Ä—É–≥—É—é?',
                        4: '–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã –∏–ª–∏ –¥–æ—Ö–æ–¥—ã?',
                        5: '–ß—Ç–æ –∑–∞ –æ—Ç—á–µ—Ç?',
                        6: '–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é?',
                        7: '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
                        8: '–û—Ç–º–µ–Ω–∞', }
        self.keyboard(message, '–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', buttons_name, callback_key='id', previous_data=data, qt_key=1, )

    def help_data(self, call):
        """Sending help to the user"""

        self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        callback_data = json.loads(call.data)
        all_messages = {1: 'Ok'}
        messages_id = int(callback_data.get('id'))
        message_text = all_messages.get(messages_id)
        if message_text:
            self.send_message(chat_id=call.message.chat.id, text=message_text)

    def get_amount(self, call):
        """Function to add income and expenses"""

        callback_data = json.loads(call.data)
        categories = self.db.get_category(call.from_user.id)
        subcategories_dict = categories.get(callback_data.get('cat', ), {}).get('subcategories', {})

        if subcategories_dict and 'sub' not in callback_data:
            self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            buttons_name = {button_id: button_name.get('name', 'Name Error') for button_id, button_name in
                            subcategories_dict.items()}
            self.keyboard(call.message, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', buttons_name, callback_key='sub',
                          previous_data=call.data)
        else:
            category_name = categories.get(callback_data.get('cat'), {}).get('name')
            subcategory_name = subcategories_dict.get(callback_data.get('sub', ), {}).get('name', 'Name Error')
            if subcategories_dict:
                subcategory_name = f' –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory_name}.'
            else:
                subcategory_name = ''
            text_message = f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}.{subcategory_name} –°—É–º–º–∞: '
            self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            if category_name is None:
                self.send_message(chat_id=call.message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (')
            else:
                self.send_message(chat_id=call.message.chat.id, text=text_message,
                                  reply_markup=types.ForceReply())

    def set_settings_bot(self, call):
        """Setting user preferences"""

        self.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–î–∞–ª—å—à–µ')
        self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        callback_data = json.loads(call.data)
        func_id = callback_data.get('cat')
        if func_id == 1:
            buttons_name = {11: '–ö–∞—Ç–µ–≥–æ—Ä–∏—é', 12: '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é', }
            self.keyboard(call.message, '–î–æ–±–∞–≤–∏—Ç—å:', buttons_name, callback_key='cat', previous_data=call.data, )
        elif func_id == 2:
            buttons_name = {21: '–ö–∞—Ç–µ–≥–æ—Ä–∏—é', 22: '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é', }
            self.keyboard(call.message, '–£–¥–∞–ª–∏—Ç—å:', buttons_name, callback_key='cat', previous_data=call.data, )
        elif func_id == 3:
            sheets_id = self.db.get_google_sheets_id(call.from_user.id)
            if sheets_id is None:
                self.send_message(chat_id=call.message.chat.id, text='–°—Å—ã–ª–∫–∞ –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
            else:
                self.send_message(chat_id=call.message.chat.id, text='–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É:\n'
                                                                     'https://docs.google.com/spreadsheets/d/' + sheets_id)
        elif func_id == 4:
            if callback_data.get('yes'):
                self.send_message(chat_id=call.message.chat.id, text='–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É Google —Ç–∞–±–ª–∏—Ü—É:',
                                  reply_markup=types.ForceReply())
            elif callback_data.get('yes') is None:
                buttons_name = {1: '–î–∞', 0: '–ù–µ—Ç', }
                message_text = f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–± Budget Bot –º–æ–≥ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ Google —Ç–∞–±–ª–∏—Ü—É, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ' \
                               f' –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' \
                               f'{self.email_budget_bot}'
                self.keyboard(call.message, message_text, buttons_name, callback_key='yes', previous_data=call.data, )
            elif not callback_data.get('yes'):
                message_text = '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–± –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å Google —Ç–∞–±–ª–∏—Ü—É ' \
                               '–∏ –æ–∫—Ä—ã—Ç—Ç—å –¥–æ—Å—Ç—É–ø –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \help –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ' \
                               '"–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å Google –¢–∞–±–ª–∏—Ü—É –Ω–∞ –¥—Ä—É–≥—É—é?".'
                self.send_message(chat_id=call.message.chat.id, text=message_text)
        elif func_id == 11:
            buttons_name = {31: '–î–æ—Ö–æ–¥—ã', 32: '–†–∞—Å—Ö–æ–¥—ã', }
            self.keyboard(call.message, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', buttons_name, callback_key='cat',
                          previous_data=call.data, )
        elif func_id == 12:
            categories = self.db.get_category(call.from_user.id)

            data = json.dumps({'f': 'add_s'})
            buttons_name = {button_id: button_name.get('name', 'Name Error') for button_id, button_name in
                            categories.items()}
            self.keyboard(call.message, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', buttons_name, callback_key='cat',
                          previous_data=data)
        elif func_id == 21:
            categories = self.db.get_category(call.from_user.id)

            data = json.dumps({'f': 'del', 'af': 1, 'a': 1})
            buttons_name = {button_id: button_name.get('name', 'Name Error') for button_id, button_name in
                            categories.items()}
            self.keyboard(call.message, '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', buttons_name, callback_key='cat',
                          previous_data=data)
        elif func_id == 22:
            categories = self.db.get_category(call.from_user.id)
            data = json.dumps({'f': 'dels'})
            buttons_name = {button_id: button_name.get('name', 'Name Error') for button_id, button_name in
                            categories.items()}
            self.keyboard(call.message, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', buttons_name, callback_key='cat',
                          previous_data=data)
        elif func_id == 31 or func_id == 32:
            if self.db.can_add_category(call.from_user.id):
                self.send_message(chat_id=call.message.chat.id,
                                  text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {}:'.format(
                                      '–¥–æ—Ö–æ–¥–æ–≤' if func_id == 31 else '—Ä–∞—Å—Ö–æ–¥–æ–≤'),
                                  reply_markup=types.ForceReply())
            else:
                message_text = f'–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ–ª—å—à–µ {str(self.max_len_category)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π!'
                self.send_message(chat_id=call.message.chat.id, text=message_text)

    def prepare_report(self, call, report_for=None, exact_month=None):
        """
        Generate a report for a specific period

        Args:
            call (telebot.types.CallbackQuer): Telebot object
            report_for (int): Select report type
            exact_month (str): The row of the month number and the last digit of the year divided by '_'

        """

        c = calendar.Calendar()
        month = datetime.now().month
        year = datetime.now().year
        message_text = None

        if report_for == 1:
            time_to = datetime.now().strftime('%Y-%m-%d ') + '23:59:59'
            time_from = datetime.now().strftime('%Y-%m-%d ') + '00:00:00'
            report_ = self.db.generate_report(time_from, time_to, call.from_user.id)
            if report_:
                message_text = f'{"-"*50}\n–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å: \n\n{report_}'

        elif report_for == 2:
            time_from = list(week for week in c.monthdatescalendar(year, month) if datetime.now().date() in week)[0][0]
            time_to = list(week for week in c.monthdatescalendar(year, month) if datetime.now().date() in week)[0][-1]
            report_ = self.db.generate_report(time_from, time_to, call.from_user.id)
            if report_:
                message_text = f'{"-"*50}\n–û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: \n\n{report_}'

        elif report_for == 3:
            time_from = [day for day in c.itermonthdates(year, month) if day.month == 5][0]
            time_to = [day for day in c.itermonthdates(year, month) if day.month == 5][-1]
            report_ = self.db.generate_report(time_from, time_to, call.from_user.id)
            if report_:
                message_text = f'{"-"*50}\n–û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü: \n\n{report_}'

        elif exact_month:
            month = int(exact_month.split('_')[0])
            year = int(str(datetime.now().year)[:-1] + exact_month.split('_')[1])

            time_from = [day for day in c.itermonthdates(year, month) if day.month == month][0].strftime(
                '%Y-%m-%d 00:00:00')
            time_to = [day for day in c.itermonthdates(year, month) if day.month == month][-1].strftime(
                '%Y-%m-%d 23:59:59')
            report_ = self.db.generate_report(time_from, time_to, call.from_user.id)
            if report_:
                message_text = f'{"-"*50}\n–û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü: \n\n{report_}'

        if message_text:
            self.send_message(chat_id=call.message.chat.id,
                              text=message_text)
        else:
            self.send_message(chat_id=call.message.chat.id,
                              text='–ù–µ—Ç –∑–∞—Ç—Ä–∞—Ç –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥')

    def get_report(self, call):
        """Starting the preparation of the report, depending on the user's choice"""

        self.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–î–∞–ª—å—à–µ')
        self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        callback_data = json.loads(call.data)
        report_for = callback_data.get('cat')

        if report_for == 4:
            if 'date' not in callback_data:
                buttons_name = self.db.get_report_month(call.from_user.id)
                self.keyboard(call.message, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:', buttons_name, callback_key='date',
                              previous_data=call.data)
            else:
                exact_month = callback_data.get('date')
                self.prepare_report(call, exact_month=exact_month)
        else:
            self.prepare_report(call, report_for)

    def delete_category(self, call):
        self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        callback_data = json.loads(call.data)
        categories = self.db.get_category(call.from_user.id)
        category_name = categories.get(callback_data.get('cat', {})).get('name', 'Name Error')
        if callback_data.get('an'):
            if self.db.delete_category(call.message, callback_data.get('cat')):
                self.send_message(chat_id=call.message.chat.id, text=f'–£–¥–∞–ª–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}')
            else:
                self.send_message(chat_id=call.message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (')

    def delete_subcategories(self, call):
        self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        callback_data = json.loads(call.data)
        categories = self.db.get_category(call.from_user.id)
        subcategories_dict = categories.get(callback_data.get('cat', ), {}).get('subcategories')
        if not subcategories_dict:
            self.send_message(chat_id=call.message.chat.id, text='–ù–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π')
        elif subcategories_dict and 'sub' not in callback_data:
            data = json.loads(call.data)
            data['af'] = 1
            data['a'] = 2
            buttons_name = {button_id: button_name.get('name', 'Name Error') for button_id, button_name in
                            subcategories_dict.items()}
            self.keyboard(call.message, '–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', buttons_name, callback_key='sub',
                          previous_data=json.dumps(data))
        elif callback_data.get('an'):
            subcategory_name = subcategories_dict.get(callback_data.get('sub', ), {}).get('name', 'Name Error')
            if self.db.delete_subcategory(call, callback_data.get('cat'), callback_data.get('sub')):
                self.send_message(chat_id=call.message.chat.id, text=f'–£–¥–∞–ª–∏–ª –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: {subcategory_name}')
            else:
                self.send_message(chat_id=call.message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (')

    def ask_again(self, call):
        """Confirmation of the choice made"""

        self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        callback_data = json.loads(call.data)
        categories = self.db.get_category(call.from_user.id)
        category_name = categories.get(callback_data.get('cat', ), {}).get('name', 'Name Error')
        subcategories_name = categories.get(callback_data.get('cat', ), {}).get('subcategories', {}).get(
            callback_data.get('sub', ), {}).get('name', 'Name Error')
        t = {1: f'–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_name}?',
             2: f'–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é {subcategories_name}?'}

        buttons_name = {1: '–î–∞', 0: '–ù–µ—Ç'}
        self.keyboard(call.message, t.get(callback_data.get('a'), '–í—ã —É–≤–µ—Ä–µ–Ω–Ω—ã?'), buttons_name,
                      callback_key='an', previous_data=call.data)

    def add_subcategory(self, call):
        callback_data = json.loads(call.data)
        categories = self.db.get_category(call.from_user.id)
        category_name = categories.get(callback_data.get('cat'), {}).get('name')
        self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        if self.db.can_add_subcategory(call):
            self.send_message(chat_id=call.message.chat.id, text=f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}. '
                                                                 f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:',
                              reply_markup=types.ForceReply())
        else:
            message_text = f'–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ–ª—å—à–µ {str(self.max_len_category)} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π!'
            self.send_message(chat_id=call.message.chat.id, text=message_text)

    def callback_inline(self, call):
        """Function selection depending on the button pressed"""

        funcs = {'amount': self.get_amount,
                 'set_stng': self.set_settings_bot,
                 'get_rp': self.get_report,
                 'del': self.delete_category,
                 'dels': self.delete_subcategories,
                 'a': self.ask_again,
                 'add_s': self.add_subcategory,
                 'help': self.help_data}
        try:
            if json.loads(call.data).get('af') and 'an' not in json.loads(call.data):
                self.ask_again(call)
            else:
                func = funcs.get(json.loads(call.data).get('f'), lambda *args, **kwargs: False)
                func(call)
        except Exception as e:
            logging.error(e)

    def text(self, message):
        """Processing text messages from the user and calling certain functions"""

        if message.reply_to_message:
            try:
                self.delete_message(chat_id=message.chat.id, message_id=message.reply_to_message.message_id)
                self.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            except:
                pass
            if message.reply_to_message.text.find('–ö–∞—Ç–µ–≥–æ—Ä–∏—è') != -1 and message.reply_to_message.text.find(
                    '–°—É–º–º–∞:') != -1:
                if message.reply_to_message.text.find(' –≥—Ä–Ω.') != -1:
                    self.send_message(chat_id=message.chat.id,
                                      text='–£–∂–µ –µ—Å—Ç—å')
                else:
                    try:
                        amount = round(float(message.text), 2)
                        if amount < 92233720368547758.07:
                            if self.db.add_data(message):
                                self.send_message(chat_id=message.chat.id,
                                                  text=f'–î–æ–±–∞–≤–∏–ª:\n{message.reply_to_message.text} {message.text} –≥—Ä–Ω.')
                            else:
                                self.send_message(chat_id=message.chat.id,
                                                  text='–í–∏–¥–∏–º–æ —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ')

                        else:
                            self.send_message(chat_id=message.chat.id,
                                              text='–≠—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞.')

                    except:
                        self.send_message(chat_id=message.chat.id,
                                          text='–ß–µ—Ç –Ω–µ —Ç–æ —Å —Å—É–º–º–æ–π, –¥–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π!\n'
                                               '–ö –ø—Ä–∏–º–µ—Ä—É: 1 –≥—Ä–Ω 55 –∫–æ–ø–µ–µ–∫ –Ω—É–∂–Ω–æ –Ω–∞–∫–∏—Å–∞—Ç—å –∫–∞–∫ 1.55')
                self.add(message)
            if message.reply_to_message.text.find('–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É Google —Ç–∞–±–ª–∏—Ü—É:') != -1:
                # –ò–º–µ–Ω–∏—å—Ç—å –Ω–∞ set_google_sheet_change
                id_sheet = re.findall(r'/spreadsheets/d/([a-zA-Z0-9-_]+)', message.text)
                if id_sheet:
                    self.db.set_google_sheet_id_change(message.from_user.id, id_sheet[0])
                    self.send_message(chat_id=message.chat.id,
                                      text=f'–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞: '
                                           f'https://docs.google.com/spreadsheets/d/{id_sheet[0]}')
                else:
                    self.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ c —Å—ã–ª–∫–æ–π.')

            if message.reply_to_message.text.find('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') != -1:
                if message.text.isalpha():
                    if len(message.text) >= self.max_len_category:
                        self.send_message(chat_id=message.chat.id,
                                          text=f'–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ')
                    # –î–ª–∏–Ω–∞ –Ω–µ –±–æ–ª—å—à–µ
                    elif self.db.add_category(message):
                        self.send_message(chat_id=message.chat.id,
                                          text=f'–î–æ–±–∞–≤–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é {message.text}.')
                    else:
                        self.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (')
                else:
                    self.send_message(chat_id=message.chat.id,
                                      text='–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!\n'
                                           '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

            if message.reply_to_message.text.find('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:') != -1:
                if message.text.isalpha():
                    if len(message.text) >= self.max_len_subcategory:
                        self.send_message(chat_id=message.chat.id,
                                          text=f'–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ')
                    elif self.db.add_subcategory(message):
                        self.send_message(chat_id=message.chat.id,
                                          text=f'–î–æ–±–∞–≤–∏–ª –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é {message.text}.')
                    else:
                        self.send_message(chat_id=message.chat.id,
                                          text='–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫')
                else:
                    self.send_message(chat_id=message.chat.id,
                                      text='–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏!\n'
                                           '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        else:
            self.send_message(chat_id=message.chat.id,
                              text='–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Ç—ã –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—å ü§∑üèª‚Äç‚ôÇÔ∏è\n'
                                   '–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É  \help.')


def send_message_telegram(message, chat_id, subject=''):
    """ Sending messages to the user through requests"""

    try:
        config = ConfigParser()
        config.read(os.path.dirname(os.path.abspath(__file__)) + '/app.ini')
        token = config.get('BUDGET_BOT', 'token')
        response = requests.post(
            url='https://api.telegram.org/bot{}/sendMessage'.format(token),
            data={'chat_id': chat_id, 'text': '{}{}'.format(subject, message)}
        ).json()
        if not response['ok']:
            logging.error(f'Error for send message to :{chat_id}. Error: {response.get("description")}')
    except Exception as e:
        logging.error(f'Send message Error.\n Error: {e}')
