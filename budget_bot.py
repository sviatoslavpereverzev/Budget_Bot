# -*- coding: utf-8 -*-
import os
import re
import logging
import requests
import json
import calendar
from datetime import datetime, time, timedelta
from configparser import ConfigParser

import telebot
from telebot import types

from models.users import Data

from database import DB
from monobank_api import set_webhook, get_webhook
from encryption import encrypt


# from databese_new import DB as DB_new


# –¥–æ–ø–∏—Å–∞—Ç—å help_data
# –¥–æ–±–∞–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

class BudgetBot(telebot.TeleBot):
    def __init__(self):

        self.config = ConfigParser()
        self.config.read(os.path.dirname(os.path.abspath(__file__)) + '/config/app.ini')
        token = self.config.get('BUDGET_BOT', 'token')
        super().__init__(token, threaded=False)

        # database object
        self.db = None

        # maximum number of categories
        self.max_number_categories = None
        # maximum number of subcategories
        self.max_number_subcategories = None

        # maximum length of category name
        self.max_len_category = None
        # maximum length of subcategory name
        self.max_len_subcategory = None
        # maximum length of description for transaction
        self.max_len_description = None

        # email bot to which to open access to the table
        self.email_budget_bot = None

        # chat id where bot error messages are sent
        self.chat_id_error_notification = None

        # Budget_Bot host
        self.host = None

        # Version of api client monobank
        self.monobank_api_version = None

        # Superusers ids
        self.superusers = None

        self.set_settings()

    def set_settings(self):
        self.db = DB()
        self.max_number_categories = self.config.get('BUDGET_BOT', 'max_number_categories')
        self.max_number_subcategories = self.config.get('BUDGET_BOT', 'max_number_subcategories')
        self.max_len_category = self.config.getint('BUDGET_BOT', 'max_len_category')
        self.max_len_subcategory = self.config.getint('BUDGET_BOT', 'max_len_subcategory')
        self.max_len_description = self.config.getint('BUDGET_BOT', 'max_len_description')

        self.email_budget_bot = self.config.get('SHEETS_API', 'email_budget_bot')
        self.chat_id_error_notification = self.config.getint('BUDGET_BOT', 'chat_id_error_notification')

        self.host = self.config.get('FLASK', 'webhook_host')
        self.monobank_api_version = self.config.get('BUDGET_BOT', 'monobank_api_version')

        self.superusers = [int(user_id) for user_id in
                           self.config.get('BUDGET_BOT', 'superusers').split(',')]

    def ping(self, message):
        logging.error('ping OK')
        self.send_message(chat_id=message.chat.id, text='–ü—Ä–∏–≤–µ—Ç üëã\n –Ø —Ä–∞–±–æ—Ç–∞—é üòé')

    def start(self, message):
        """Adding a user to the database and welcome with user"""

        user_name = message.from_user.first_name
        user_name = '' if not user_name or user_name == 'None' else f', {user_name} '
        if not self.db.is_user(message.from_user.id):
            if self.db.add_user(message):
                message_text = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ{user_name}üëã\nBudget Bot –ø–æ–º–æ–∂–µ—Ç –í–∞–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –í–∞—à –±—é–¥–∂–µ—Ç üí∏\n' + \
                               '–í—Å–µ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ –í–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é Google –¢–∞–±–ª–∏—Ü—É üòé\n' \
                               '–í—ã –º–æ–∂–µ—Ç–µ —Å—Ç—Ä–æ–∏—Ç—å –ª—é–±—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏, —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –¥–µ–ª–∞—Ç—å —Ä–∞—Å—á–µ—Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä—è –¥–∞–Ω–Ω—ã–º, ' \
                               '–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤ –Ω–µ—ë –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è.\n' \
                               '–ò—Å–ø–æ–ª—å–∑—É—è Budget Bot –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —á—Ç–æ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ ' \
                               '—Å–æ–≥–ª–∞—à–µ–Ω–∏—è: https://budgetbot.site/agreement.\n' \
                               '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–± –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É \help.\n\n' \
                               '–ò –Ω–∞–ø–æ—Å–ª–µ–¥–æ–∫ —Ü–∏—Ç–∞—Ç–∞ –î—ç–π–≤–∞ –†—ç–º—Å–∏:\n' \
                               '¬´–ò–ª–∏ —Ç—ã –±—É–¥–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –¥–µ–Ω—å–≥–∞–º–∏, –∏–ª–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–±–æ–π.¬ª'
                self.send_message(chat_id=message.chat.id, text=message_text)
        else:
            message_text = f'–ò —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç{user_name}üëã\n–ï—Å–ª–∏ –í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É \help.'
            self.send_message(chat_id=message.chat.id, text=message_text)

    def add(self, message):
        """Select categories"""

        self.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        data = json.dumps({'f': 'am'})
        categories = self.db.get_category(message.from_user.id)
        buttons_name = {button_id: button_name.get('name', 'Name Error') for button_id, button_name in
                        categories.items()}
        self.keyboard(message.chat.id, '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', buttons_name, callback_key='ct', previous_data=data)

    def settings(self, message):
        """Select Settings categories"""

        self.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        data = json.dumps({'f': 'set_stng'})
        buttons_name = {1: '–î–æ–±–∞–≤–∏—Ç—å', 2: '–£–¥–∞–ª–∏—Ç—å', 3: '–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É',
                        4: '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É', 5: '–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç Monobank', 6: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å'}
        self.keyboard(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', buttons_name, callback_key='ct', previous_data=data,
                      qt_key=1, )

    def report(self, message):
        """Select report categories"""

        self.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        data = json.dumps({'f': 'get_rp'})
        buttons_name = {1: '–î–µ–Ω—å', 2: '–ù–µ–¥–µ–ª—è', 3: '–ú–µ—Å—è—Ü', 4: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü', 5: '–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å'}
        self.keyboard(message.chat.id, '–û—Ç—á–µ—Ç –∑–∞:', buttons_name, callback_key='ct', previous_data=data, qt_key=1, )

    def help(self, message):
        """Select categories for help the user"""

        self.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        data = json.dumps({'f': 'help'})
        buttons_name = {
            1: '–î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω Budget Bot?',
            2: '–ß—Ç–æ –æ–Ω –º–æ–∂–µ—Ç?',
            3: '–î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü–∞?',
            4: '–î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ‚Äú/add‚Äù?',
            5: '–î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ‚Äú/report‚Äù?',
            6: '–î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ‚Äú/settings‚Äù?',
            7: '–î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ‚Äú/help‚Äù?',
            8: '–ö–∞–∫ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–≤–æ—é –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É?',
            9: '–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç Monobank?',
            10: '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
            11: {'name': '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ', 'url': 'https://budgetbot.site/'},
            12: {'name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', 'url': 'https://budgetbot.site/agreement'},
        }
        self.keyboard(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', buttons_name, callback_key='id', previous_data=data,
                      qt_key=1)

    def get_command_token(self, message):
        token = encrypt(f'user_id:{message.from_user.id};chat_id:{message.chat.id}')
        self.send_message(chat_id=message.chat.id, text=f'–í–∞—à —Ç–æ–∫–µ–Ω:\n{token}')

    def simple_commands(self, message=None, command=None, user_id=None):
        if message:
            pass
        elif command and user_id:
            answer = self.db.simple_commands(user_id, command)
            return answer

    def add_card(self, message):
        self.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        data = json.dumps({'f': 'addc'})
        buttons_name = {1: 'Monobank', 2: 'PrivatBank'}
        self.keyboard(message.chat.id, '–û—Ç—á–µ—Ç –∑–∞:', buttons_name, callback_key='ct', previous_data=data, qt_key=1, )

    def help_data(self, call):
        """Sending help to the user"""

        self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        callback_data = json.loads(call.data)
        all_messages = {
            1: 'Budget Bot - —Ç–µ–ª–µ–≥–∞–º –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–± –ø–æ–º–æ—á—å –í–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –±—é–¥–∂–µ—Ç–æ–º.',
            2: '–í–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –í–∞—à—É Google —Ç–∞–±–ª–∏—Ü—É –≤ –∫–æ—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ—è—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Ç–∞–±–ª–∏—Ü—É –∫–∞–∫ –ø–æ–∂–µ–ª–∞–µ—Ç–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é Google —Ç–∞–±–ª–∏—Ü—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –í–∞—Å. –ü—Ä–∏ —ç—Ç–æ–º –≤ Budget Bot –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª—é—Ç –≤–∞–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü, –¥–µ–Ω—å –∏–ª–∏ –Ω–µ–¥–µ–ª—é. –¢–∞–∫–∂–µ –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å. –ö—Ä–æ–º–µ —ç—Ç–æ–≥–æ –í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–∞–Ω–∫–∞, –∏ –ø—Ä–∏ –ª—é–±–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–Ω–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ Budget Bo',
            3: '–í Google —Ç–∞–±–ª–∏—Ü—É –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤—Å–µ –≤–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ Budget Bot. –≠—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –ª–∏—Å—Ç Data, –∞ –∑–∞—Ç–µ–º —Å—Ç—Ä–æ—è—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã. –ö–æ–≥–¥–∞ –≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º —Ç–æ –¥–ª—è –í–∞—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è Google —Ç–∞–±–ª–∏—Ü–∞. –í–Ω–∏–º–∞–Ω–∏–µ: –¥–æ—Å—Ç—É–ø –∫ Google —Ç–∞–±–ª–∏—Ü–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.',
            4: '–ò—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É ‚Äú/add‚Äù –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–∞—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.',
            5: '–ò—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É ‚Äú/report‚Äù –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –¥–æ—Ö–æ–¥–∞–º/—Ä–∞—Å—Ö–æ–¥–∞–º –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏–ª–∏ –º–µ—Å—è—Ü. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ –ª—é–±–æ–π –º–µ—Å—è—Ü –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ —Å—Ç–∞—Ä—à–µ –æ–¥–Ω–æ–≥–æ –≥–æ–¥–∞. –ó–¥–µ—Å—å –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å.',
            6: '–ò—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É ‚Äú/settings‚Äù –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å–≤–æ–π Budget Bot. –ò–∑–º–µ–Ω—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏–∑–º–µ–Ω—è—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –í–∞—à—É Google —Ç–∞–±–ª–∏—Ü—É, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≤–∞—à –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç –±–∞–Ω–∫–∞ –∏ –¥—Ä.',
            7: '–ò—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É ‚Äú/help‚Äù –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Budget Bot –∏ —Ä–∞–∑–ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.',
            8: '–î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É ‚Äú/settings‚Äù > ‚Äú–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É‚Äù > –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–∞—Ç—å ‚Äú–î–∞‚Äù > –≤—Å—Ç–∞–≤–∏—Ç—å –í–∞—à—É —Å—Å—ã–ª–∫—É –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.',
            9: '–ò—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É ‚Äú/settings‚Äù > ‚Äú–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç Monobank‚Äù > ‚Äú–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è‚Äù > –Ω–∞ –Ω–æ—É—Ç–±—É–∫–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ https://api.monobank.ua/ > —Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º QR –∫–æ–¥ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Monobank > —Å–∫–æ–ø—Ä—É–π—Ç–µ –í–∞—à —Ç–æ–∫–µ–Ω > –Ω–∞–∂–º–∏—Ç–µ –≤ –±–æ—Ç–µ ‚Äú–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å‚Äù > –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
            10: 'Telegram: @sviatoslav_pereverziev –ü–æ—á—Ç–∞: sviatoslav.pereverziev@gmail.com –¢–µ–ª–µ—Ñ–æ–Ω: +380 63 920 66 97', }
        messages_id = int(callback_data.get('id'))
        message_text = all_messages.get(messages_id)
        if message_text:
            self.send_message(chat_id=call.message.chat.id, text=message_text)

    def get_amount(self, call):
        """Function to add income and expenses"""

        callback_data = json.loads(call.data)
        categories = self.db.get_category(call.from_user.id)
        subcategories_dict = categories.get(callback_data.get('ct', ), {}).get('subcategories', {})
        if callback_data.get('ct') == 99:
            self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            return

        if subcategories_dict and 'sub' not in callback_data:
            self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            buttons_name = {button_id: button_name.get('name', 'Name Error') for button_id, button_name in
                            subcategories_dict.items()}
            self.keyboard(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', buttons_name, callback_key='sub',
                          previous_data=call.data, add_cancel=False)
        else:
            category_name = categories.get(callback_data.get('ct'), {}).get('name')
            subcategory_name = subcategories_dict.get(callback_data.get('sub', ), {}).get('name', 'Name Error')
            if subcategories_dict:
                subcategory_name = f' –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory_name}.'
            else:
                subcategory_name = ''
            text_message = f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}.{subcategory_name} –°—É–º–º–∞: '
            self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            if category_name is None:
                self.send_message(chat_id=call.message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (')
            else:
                self.send_message(chat_id=call.message.chat.id, text=text_message,
                                  reply_markup=types.ForceReply())

    def add_from_api(self, call=None, user_id=None, chat_id=None, id=None, message_text=None, data_api=None):
        transaction_id = None
        if data_api:
            transaction_id = self.db.add_data_from_api(data_api)
            if not transaction_id:
                return False

        if data_api and transaction_id:
            data = json.dumps({'f': 'afa', 'id': transaction_id})
            categories = self.db.get_category(data_api['user_id'])
            buttons_name = {button_id: button_name.get('name', 'Name Error') for button_id, button_name in
                            categories.items()}
            currency = {980: '–≥—Ä–Ω', 840: '$', 978: '‚Ç¨'}.get(data_api['currency_code'])
            sign = '-' if not data_api['is_income'] else ''
            message_text = f'–ë–∞–Ω–∫: {data_api["bank"]}\n' \
                           f'–°—É–º–º–∞: {sign}%.2f {currency}.\n' % float(data_api['amount'] / 100)
            if data_api['description']:
                message_text += '–û–ø–∏—Å–∞–Ω–∏–µ: %s.\n' % data_api['description']
            if data_api['commission'] > 0:
                message_text += f'–ö–æ–º–º–∏—Å–∏—è: %.2f {currency}.\n' % float(data_api['commission'] / 100)
            if data_api['cashback'] > 0:
                message_text += f'–ö—ç—à–±—ç–∫: %.2f {currency}.\n' % float(data_api['cashback'] / 100)
            message_text += f'–ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã: %.2f {currency}.\n–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n' % float(
                data_api['card_balance'] / 100)

            self.keyboard(data_api['chat_id'], message_text, buttons_name, 'ct', data)

        if call:
            callback_data = json.loads(call.data)
            if callback_data.get('ct', ) == 99:
                self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
                return
            categories = self.db.get_category(call.from_user.id)
            subcategories_dict = categories.get(callback_data.get('ct', ), {}).get('subcategories', {})
            category_name = categories.get(callback_data.get('ct'), {}).get('name')
            self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            if subcategories_dict and 'sub' not in callback_data:
                message_text = call.message.text.replace('\n–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', '')
                buttons_name = {button_id: button_name.get('name', 'Name Error') for button_id, button_name in
                                subcategories_dict.items()}
                message_text = f'{message_text}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}.\n–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:'
                self.keyboard(call.message.chat.id, message_text, buttons_name, callback_key='sub',
                              previous_data=call.data, add_cancel=False)
            else:

                subcategory_name = subcategories_dict.get(callback_data.get('sub', ), {}).get('name', 'Name Error')
                if subcategories_dict:
                    subcategory_text = f'\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory_name}. '
                else:
                    subcategory_text = ''

                message_text = call.message.text.replace('\n–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', '').replace(
                    '\n–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', '')
                if '–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ' not in message_text:
                    message_text += '\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s' % category_name
                message_text += subcategory_text
                transaction_id = callback_data.get('id')
                amount = self.db.get_amount_transaction(transaction_id)
                self.db.update_balance(call.from_user.id, abs(amount), amount > 0)
                self.db.set_category(transaction_id, category_name)
                if subcategory_name and subcategory_name != 'Name Error':
                    self.db.set_subcategory(transaction_id, subcategory_name)
                balance = self.db.get_balance(call.from_user.id)
                self.db.set_balance_transaction(transaction_id, balance)
                self.db.set_transaction_status(transaction_id, 1)
                message_text = f'–î–æ–±–∞–≤–∏–ª:\n{message_text}\n–ë–∞–ª–∞–Ω—Å: {balance / 100} –≥—Ä–Ω.'
                self.send_message(chat_id=call.message.chat.id, text=message_text)

    def set_settings_bot(self, call):
        """Setting user preferences"""

        # self.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–î–∞–ª—å—à–µ')
        self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        callback_data = json.loads(call.data)
        func_id = callback_data.get('ct')
        if func_id == 1:
            buttons_name = {11: '–ö–∞—Ç–µ–≥–æ—Ä–∏—é', 12: '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é', }
            self.keyboard(call.message.chat.id, '–î–æ–±–∞–≤–∏—Ç—å:', buttons_name, callback_key='ct', previous_data=call.data, )
        elif func_id == 2:
            buttons_name = {21: '–ö–∞—Ç–µ–≥–æ—Ä–∏—é', 22: '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é', }
            self.keyboard(call.message.chat.id, '–£–¥–∞–ª–∏—Ç—å:', buttons_name, callback_key='ct', previous_data=call.data, )
        elif func_id == 3:
            sheets_id = self.db.get_google_sheets_id(call.from_user.id)
            if sheets_id is None:
                self.send_message(chat_id=call.message.chat.id, text='–°—Å—ã–ª–∫–∞ –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.')
            else:
                self.send_message(chat_id=call.message.chat.id, text='–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É:\n'
                                                                     'https://docs.google.com/spreadsheets/d/' + sheets_id)
        elif func_id == 4:
            if callback_data.get('yes'):
                self.send_message(chat_id=call.message.chat.id, text='–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É Google —Ç–∞–±–ª–∏—Ü—É:',
                                  reply_markup=types.ForceReply())
            elif callback_data.get('yes') is None:
                buttons_name = {1: '–î–∞', 0: '–ù–µ—Ç', }
                message_text = f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–± Budget Bot –º–æ–≥ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ Google —Ç–∞–±–ª–∏—Ü—É, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ' \
                               f' –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' \
                               f'{self.email_budget_bot}\n –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –¥–æ—Å—Ç—É–ø?'
                self.keyboard(call.message.chat.id, message_text, buttons_name, callback_key='yes',
                              previous_data=call.data, add_cancel=False)
            elif not callback_data.get('yes'):
                message_text = '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–± –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å Google —Ç–∞–±–ª–∏—Ü—É ' \
                               '–∏ –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \help –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ' \
                               '"–ö–∞–∫ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–≤–æ—é –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É?".'
                self.send_message(chat_id=call.message.chat.id, text=message_text)
        elif func_id == 5:
            buttons_name = {51: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è', 52: '–û—Ç–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è', 53: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è',
                            54: '–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–æ–≤–µ—â–µ–Ω–∏—è—Ö Monobank'}
            self.keyboard(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', buttons_name, callback_key='ct',
                          previous_data=call.data)

        elif func_id == 6:
            message_text = '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞:'
            self.send_message(chat_id=call.message.chat.id, text=message_text,
                              reply_markup=types.ForceReply())

        elif func_id == 11:
            if self.db.can_add_category(call.from_user.id):
                buttons_name = {31: '–î–æ—Ö–æ–¥—ã', 32: '–†–∞—Å—Ö–æ–¥—ã', }
                self.keyboard(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', buttons_name, callback_key='ct',
                              previous_data=call.data, add_cancel=False)
            else:
                message_text = f'–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ–ª—å—à–µ {self.max_number_categories} –∫–∞—Ç–µ–≥–æ—Ä–∏–π.'
                self.send_message(chat_id=call.message.chat.id, text=message_text)

        elif func_id == 12:
            categories = self.db.get_category(call.from_user.id)

            data = json.dumps({'f': 'add_s'})
            buttons_name = {button_id: button_name.get('name', 'Name Error') for button_id, button_name in
                            categories.items()}
            self.keyboard(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', buttons_name, callback_key='ct',
                          previous_data=data)
        elif func_id == 21:
            categories = self.db.get_category(call.from_user.id)

            data = json.dumps({'f': 'del', 'af': 1, 'a': 1})
            buttons_name = {button_id: button_name.get('name', 'Name Error') for button_id, button_name in
                            categories.items()}
            self.keyboard(call.message.chat.id, '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', buttons_name, callback_key='ct',
                          previous_data=data)
        elif func_id == 22:
            categories = self.db.get_category(call.from_user.id)
            data = json.dumps({'f': 'dels'})
            buttons_name = {button_id: button_name.get('name', 'Name Error') for button_id, button_name in
                            categories.items()}
            self.keyboard(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', buttons_name, callback_key='ct',
                          previous_data=data)
        elif func_id == 31 or func_id == 32:
            self.send_message(chat_id=call.message.chat.id,
                              text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {}:'.format(
                                  '–¥–æ—Ö–æ–¥–æ–≤' if func_id == 31 else '—Ä–∞—Å—Ö–æ–¥–æ–≤'),
                              reply_markup=types.ForceReply())
        elif func_id == 51:
            message_text = '–£—Å—Ç–∞–Ω–∞–≤–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è Monobank –æ–∑–Ω–∞—á–∞–µ—Ç –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: ' \
                           'https://budgetbot.site/agreement.\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ https://api.monobank.ua/, ' \
                           '–∞–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω.'
            buttons_name = {55: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'}
            self.keyboard(call.message.chat.id, message_text, buttons_name, callback_key='ct',
                          previous_data=call.data)

        elif func_id == 52:
            message_text = '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ https://api.monobank.ua/, –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω.\n–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:'
            self.send_message(chat_id=call.message.chat.id, text=message_text, reply_markup=types.ForceReply())

        elif func_id == 53:
            message_text = '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ https://api.monobank.ua/, –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω.\n–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:'
            self.send_message(chat_id=call.message.chat.id, text=message_text, reply_markup=types.ForceReply())

        elif func_id == 54:
            message_text = '–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç Monobank –∏ –≤—Å–µ —Ç—Ä–∞—Ç—ã –∏ –¥–æ—Ö–æ–¥—ã —Å ' \
                           '–º–æ–Ω–æ–±–∞–Ω–∫–∞ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ Budget Bot.\n' \
                           '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã \help'
            self.send_message(chat_id=call.message.chat.id, text=message_text)

        elif func_id == 55:
            message_text = '–í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:'
            self.send_message(chat_id=call.message.chat.id, text=message_text, reply_markup=types.ForceReply())

    def prepare_report(self, call, report_for=None, exact_month=None):
        print('prepare_report')
        """
        Generate a report for a specific period

        Args:
            call (telebot.types.CallbackQuer): Telebot object
            report_for (int): Select report type
            exact_month (str): The row of the month number and the last digit of the year divided by '_'

        """

        c = calendar.Calendar()
        month = datetime.now().month
        year = datetime.now().year
        message_text = None

        # day
        if report_for == 1:
            time_from = datetime.combine(datetime.today(), time.min)
            time_to = datetime.combine(datetime.today(), time.min) + timedelta(days=1)
            report_ = self.db.generate_report(time_from, time_to, call.from_user.id)
            if report_:
                message_text = f'{"-" * 38}\n–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å: \n\n{report_}'

        # week
        elif report_for == 2:
            time_from = list(week for week in c.monthdatescalendar(year, month) if datetime.now().date() in week)[0][0]
            time_to = list(week for week in c.monthdatescalendar(year, month) if datetime.now().date() in week)[0][-1]
            report_ = self.db.generate_report(time_from, time_to, call.from_user.id)
            if report_:
                message_text = f'{"-" * 38}\n–û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: \n\n{report_}'

        # month
        elif report_for == 3 or exact_month:
            if exact_month:
                month = int(exact_month.split('_')[0])
                year = int(str(datetime.now().year)[:-2] + exact_month.split('_')[1])
            month_name = Data.CALENDER_MONTH.get(month, '–º–µ—Å—è—Ü')
            time_from = [day for day in c.itermonthdates(year, month) if day.month == month][0]
            time_to = time_from + timedelta(days=calendar.monthrange(year, month)[1])
            report_ = self.db.generate_report(time_from, time_to, call.from_user.id)
            if report_:
                message_text = f'{"-" * 38}\n–û—Ç—á–µ—Ç –∑–∞ {month_name}: \n\n{report_}'

        if message_text:
            self.send_message(chat_id=call.message.chat.id,
                              text=message_text)
        else:
            self.send_message(chat_id=call.message.chat.id,
                              text='–ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.')

    def get_report(self, call):
        """Starting the preparation of the report, depending on the user's choice"""

        self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        callback_data = json.loads(call.data)
        report_for = callback_data.get('ct')

        if report_for == 4:
            if 'date' not in callback_data:
                buttons_name = self.db.get_report_month(call.from_user.id)
                if not buttons_name:
                    self.send_message(chat_id=call.message.chat.id, text=f'–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ç—Ä–∞—Ç.')
                else:
                    self.keyboard(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:', buttons_name, callback_key='date',
                                  previous_data=call.data, add_cancel=False)
            else:
                exact_month = callback_data.get('date')
                self.prepare_report(call, exact_month=exact_month)
        elif report_for == 5:
            balance = self.db.get_balance(call.from_user.id)
            self.send_message(chat_id=call.message.chat.id,
                              text=f'–ë–∞–ª–∞–Ω—Å: {balance / 100} –≥—Ä–Ω.')

        elif report_for != 99:
            self.prepare_report(call, report_for)

    def delete_category(self, call):
        self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        callback_data = json.loads(call.data)
        if callback_data.get('ct') == 99:
            self.send_message(chat_id=call.message.chat.id, text='–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.')
            return
        categories = self.db.get_category(call.from_user.id)
        category_name = categories.get(callback_data.get('ct', {})).get('name', 'Name Error')

        if callback_data.get('an'):
            if self.db.delete_category(call.from_user.id, callback_data.get('ct')):
                self.send_message(chat_id=call.message.chat.id, text=f'–£–¥–∞–ª–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}')
            else:
                self.send_message(chat_id=call.message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (')

    def delete_subcategories(self, call):
        self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        callback_data = json.loads(call.data)
        categories = self.db.get_category(call.from_user.id)
        subcategories_dict = categories.get(callback_data.get('ct', ), {}).get('subcategories')
        if not subcategories_dict:
            self.send_message(chat_id=call.message.chat.id, text='–ù–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π')
        elif subcategories_dict and 'sub' not in callback_data:
            data = json.loads(call.data)
            data['af'] = 1
            data['a'] = 2
            buttons_name = {button_id: button_name.get('name', 'Name Error') for button_id, button_name in
                            subcategories_dict.items()}
            self.keyboard(call.message.chat.id, '–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', buttons_name, callback_key='sub',
                          previous_data=json.dumps(data), add_cancel=False)

        elif callback_data.get('an'):
            subcategory_name = subcategories_dict.get(callback_data.get('sub', ), {}).get('name', 'Name Error')

            if self.db.delete_subcategory(call.from_user.id, callback_data.get('ct'), callback_data.get('sub')):
                self.send_message(chat_id=call.message.chat.id, text=f'–£–¥–∞–ª–∏–ª –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: {subcategory_name}')
            else:
                self.send_message(chat_id=call.message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (')

    def ask_again(self, call):
        """Confirmation of the choice made"""

        self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        callback_data = json.loads(call.data)
        categories = self.db.get_category(call.from_user.id)
        category_name = categories.get(callback_data.get('ct', ), {}).get('name', 'Name Error')
        subcategories_name = categories.get(callback_data.get('ct', ), {}).get('subcategories', {}).get(
            callback_data.get('sub', ), {}).get('name', 'Name Error')
        t = {1: f'–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_name}?',
             2: f'–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é {subcategories_name}?'}

        buttons_name = {1: '–î–∞', 0: '–ù–µ—Ç'}
        self.keyboard(call.message.chat.id, t.get(callback_data.get('a'), '–í—ã —É–≤–µ—Ä–µ–Ω–Ω—ã?'), buttons_name,
                      callback_key='an', previous_data=call.data, add_cancel=False)

    def add_subcategory(self, call):
        callback_data = json.loads(call.data)
        self.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        if callback_data.get('ct') == 99:
            self.send_message(chat_id=call.message.chat.id, text='–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.')
            return
        categories = self.db.get_category(call.from_user.id)
        category_name = categories.get(callback_data.get('ct'), {}).get('name')
        if self.db.can_add_subcategory(call):
            self.send_message(chat_id=call.message.chat.id, text=f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}. '
                                                                 f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:',
                              reply_markup=types.ForceReply())
        else:
            message_text = f'–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ–ª—å—à–µ {self.max_number_subcategories} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.'
            self.send_message(chat_id=call.message.chat.id, text=message_text)

    def callback_inline(self, call):
        """Function selection depending on the button pressed"""

        funcs = {'am': self.get_amount,
                 'set_stng': self.set_settings_bot,
                 'get_rp': self.get_report,
                 'del': self.delete_category,
                 'dels': self.delete_subcategories,
                 'a': self.ask_again,
                 'add_s': self.add_subcategory,
                 'help': self.help_data,
                 'afa': self.add_from_api}
        try:
            if json.loads(call.data).get('af') and 'an' not in json.loads(call.data):
                self.ask_again(call)
            else:
                func = funcs.get(json.loads(call.data).get('f'), lambda *args, **kwargs: False)
                func(call)
        except Exception as e:
            logging.error(e)

    def text(self, message):
        """Processing text messages from the user and calling certain functions"""

        if message.reply_to_message:
            self.delete_message(chat_id=message.chat.id, message_id=message.reply_to_message.message_id)
            self.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            if message.reply_to_message.text.find('–ö–∞—Ç–µ–≥–æ—Ä–∏—è') != -1 and message.reply_to_message.text.find(
                    '–°—É–º–º–∞:') != -1:
                if message.reply_to_message.text.find(' –≥—Ä–Ω.') != -1:
                    self.send_message(chat_id=message.chat.id,
                                      text='–£–∂–µ –µ—Å—Ç—å')
                else:
                    try:
                        message_amount = re.findall(r'\d+[.]\d+|\d+', message.text)[0]
                        amount = abs(int(round(float(message_amount), 2) * 100))
                        if amount < 9223372036854775807:

                            date = ''
                            patterns = [r'\d{2}[.]\d{2}[.]\d{2}\s\d{2}[:]\d{2}', r'\d{2}[.]\d{2}[.]\d{2}']
                            for pattern in patterns:
                                if re.findall(pattern, message.text):
                                    date = re.findall(pattern, message.text)[0]
                                    break

                            description = message.text.replace(date, '').replace(str(message_amount), '').strip()

                            if date:
                                if len(date) == 8:
                                    date += ' 12:00'
                                try:
                                    date = datetime.strptime(date, '%d.%m.%y %H:%M')
                                except ValueError:
                                    self.send_message(chat_id=message.chat.id,
                                                      text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞.\n'
                                                           '–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã %d.%m.%y %H:%M –∏–ª–∏ %d.%m.%y')
                                    return

                            if description and len(description) > self.max_len_description:
                                self.send_message(chat_id=message.chat.id,
                                                  text='–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è.')
                                return

                            balance = self.db.add_data(message, description, date=date)
                            if balance:
                                message_text = f'–î–æ–±–∞–≤–∏–ª:\n{message.reply_to_message.text} {message_amount} –≥—Ä–Ω.'
                                if description:
                                    message_text += f'\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}.'
                                if balance and not date:
                                    message_text += f'\n–ë–∞–ª–∞–Ω—Å: {balance / 100} –≥—Ä–Ω.'
                                if date:
                                    message_text += f'\n–î–∞—Ç–∞: {date.strftime("%d.%m.%y %H:%M.")}'
                                self.send_message(chat_id=message.chat.id,
                                                  text=message_text)
                            else:
                                self.send_message(chat_id=message.chat.id,
                                                  text='–í–∏–¥–∏–º–æ —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ')

                        else:
                            self.send_message(chat_id=message.chat.id,
                                              text='–≠—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞.')

                    except ValueError as e:

                        self.send_message(chat_id=message.chat.id,
                                          text=f'–ß–µ—Ç –Ω–µ —Ç–æ —Å —Å—É–º–º–æ–π, –¥–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π!\n'
                                               f'Error {e}'
                                               '–ö –ø—Ä–∏–º–µ—Ä—É: 1 –≥—Ä–Ω 55 –∫–æ–ø–µ–µ–∫ –Ω—É–∂–Ω–æ –Ω–∞–∫–∏—Å–∞—Ç—å –∫–∞–∫ 1.55')
                    except Exception as e:
                        logging.error(f'Error: {e}')
                        self.send_message(chat_id=message.chat.id,
                                          text='–í–∏–¥–∏–º–æ —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ')

                self.add(message)
            elif message.reply_to_message.text.find('–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É Google —Ç–∞–±–ª–∏—Ü—É:') != -1:
                id_sheet = re.findall(r'/spreadsheets/d/([a-zA-Z0-9-_]+)', message.text)
                if id_sheet:
                    self.db.set_google_sheet_id_change(message.from_user.id, id_sheet[0])
                    self.send_message(chat_id=message.chat.id,
                                      text=f'–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞: '
                                           f'https://docs.google.com/spreadsheets/d/{id_sheet[0]}')
                else:
                    self.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ c —Å—ã–ª–∫–æ–π.')

            elif message.reply_to_message.text.find('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') != -1:
                if len(message.text) >= self.max_len_category:
                    self.send_message(chat_id=message.chat.id,
                                      text=f'–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ')
                elif self.db.add_category(message):
                    self.send_message(chat_id=message.chat.id,
                                      text=f'–î–æ–±–∞–≤–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é {message.text}.')
                else:
                    self.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (')

            elif message.reply_to_message.text.find('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:') != -1:
                if len(message.text) >= self.max_len_subcategory:
                    self.send_message(chat_id=message.chat.id,
                                      text=f'–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ')
                elif self.db.add_subcategory(message):
                    self.send_message(chat_id=message.chat.id,
                                      text=f'–î–æ–±–∞–≤–∏–ª –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é {message.text}.')
                else:
                    self.send_message(chat_id=message.chat.id,
                                      text='–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫')

            elif message.reply_to_message.text.find('–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:') != -1:
                token = message.text.split(':')[-1].strip()
                if token:
                    webhook = get_webhook(token)
                    if webhook and webhook != 'Token Error':
                        if webhook.rfind('https://%s/monobank_api/%s/' % (self.host, self.monobank_api_version)) == -1:
                            message_text = f'–ù–µ–≤–µ—Ä–Ω—ã–π webhook. –£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω webhook: {webhook}.\n' \
                                           f'–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç monobank –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –µ—â–µ —Ä–∞–∑ –∏–ª–∏ ' \
                                           f'–Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É'
                        else:
                            message_text = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.'
                    elif webhook and webhook == 'Token Error':
                        message_text = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.'
                    else:
                        message_text = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.'
                else:
                    message_text = '–¢–æ–∫–µ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.'

                self.send_message(chat_id=message.chat.id, text=message_text)

            elif message.reply_to_message.text.find('–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:') != -1:
                token = message.text.split(':')[-1].strip()
                if token:
                    response = set_webhook(token, '')
                    message_text = '–í–∏–¥–∏–º–æ —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ'
                    if isinstance(response, dict):
                        if response.get('status') == 'ok':
                            message_text = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.'
                        elif 'errorDescription' in response:
                            if response['errorDescription'] == "Unknown 'X-Token'":
                                message_text = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.'
                            else:
                                message_text = '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ monobank.\n' \
                                               '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.'
                else:
                    message_text = '–¢–æ–∫–µ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.'

                self.send_message(chat_id=message.chat.id, text=message_text)

            elif message.reply_to_message.text.find('–í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:') != -1:
                token = message.text.replace('–í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', '')
                if token:
                    url = 'https://budgetbot.site/monobank_api/v1/' + encrypt(
                        f'user_id:{message.from_user.id};chat_id:{message.chat.id}')
                    response = set_webhook(token, url)
                    if isinstance(response, dict):
                        if response.get('status') == 'ok':
                            self.send_message(chat_id=message.chat.id, text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.')
                        if 'errorDescription' in response:
                            if response['errorDescription'] == "Unknown 'X-Token'":
                                message_text = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.'
                                self.send_message(chat_id=message.chat.id, text=message_text)
                            else:
                                message_text = '–í–∏–¥–∏–º–æ —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ'
                                self.send_message(chat_id=message.chat.id, text=message_text)

            elif message.reply_to_message.text == '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞:':
                try:
                    amount = int(float(message.text) * 100)
                    if abs(amount) < 9223372036854775807:
                        if self.db.set_balance(message.from_user.id, amount):
                            self.send_message(chat_id=message.chat.id,
                                              text=f'–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n–ë–∞–ª–∞–Ω—Å: {message.text} –≥—Ä–Ω.')
                        else:
                            self.send_message(chat_id=message.chat.id,
                                              text='–í–∏–¥–∏–º–æ —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ')

                    else:
                        self.send_message(chat_id=message.chat.id,
                                          text='–≠—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞.')
                except ValueError as e:
                    self.send_message(chat_id=message.chat.id,
                                      text=f'–ß–µ—Ç –Ω–µ —Ç–æ —Å —Å—É–º–º–æ–π, –¥–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π!\n'
                                           '–ö –ø—Ä–∏–º–µ—Ä—É: 1 –≥—Ä–Ω 55 –∫–æ–ø–µ–µ–∫ –Ω—É–∂–Ω–æ –Ω–∞–∫–∏—Å–∞—Ç—å –∫–∞–∫ 1.55')

        else:
            self.send_message(chat_id=message.chat.id,
                              text='–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –í—ã –æ—Ç –º–µ–Ω—è —Ö–æ—Ç–∏—Ç–µ ü§∑üèª‚Äç‚ôÇÔ∏è\n'
                                   '–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É  \help.')

    def keyboard(self, chat_id, message_text, buttons, callback_key, previous_data, qt_key=3, add_cancel=True):
        """
        Keyboard for all methods

        Args:
            chat_id (int): id chat
            message_text (str): Text above the keyboard
            buttons (dict): Dictionary of buttons, where the key is the button identifier
            and the value is the name of the button
            callback_key (str): Key for keyback button
            previous_data (json): The date that came and is completed by the callback
            qt_key (int): Number of buttons in a row
            add_cancel (bool): Add cancel button

        """

        callback = json.loads(previous_data, encoding='utf-8')
        if add_cancel:
            buttons.update({99: '–û—Ç–º–µ–Ω–∞'})
        list_keys = []
        keyboard = types.InlineKeyboardMarkup(row_width=qt_key)
        for button_id, button_name in buttons.items():
            callback[callback_key] = button_id
            callback_data_ = json.dumps(callback)
            if not isinstance(button_name, dict):
                list_keys.append(types.InlineKeyboardButton(button_name, callback_data=callback_data_))
            else:
                list_keys.append(types.InlineKeyboardButton(button_name.get('name'), url=button_name.get('url'),
                                                            callback_data=callback_data_))
        keyboard.add(*list_keys)
        self.send_message(int(chat_id), message_text, reply_markup=keyboard)

    def delete_message(self, chat_id, message_id):
        try:
            return super().delete_message(chat_id, message_id)
        except:
            pass


def send_message_telegram(message, chat_id, subject=''):
    """ Sending messages to the user through requests"""

    try:
        config = ConfigParser()
        config.read(os.path.dirname(os.path.abspath(__file__)) + '/config/app.ini')
        token = config.get('BUDGET_BOT', 'token')
        response = requests.post(
            url='https://api.telegram.org/bot{}/sendMessage'.format(token),
            data={'chat_id': chat_id, 'text': '{}{}'.format(subject, message)}
        ).json()
        if not response['ok']:
            logging.error(f'Error for send message to :{chat_id}. Error: {response.get("description")}')
    except Exception as e:
        logging.error(f'Send message Error.\n Error: {e}')


if __name__ == '__main__':
    b = BudgetBot()
    # header = {'accept': 'application/json', 'Content-Type': 'application/json', }
    # response = requests.post(
    #     'https://budgetbot.site/monobank_api/v1/gAAAAABdvYjzLHsjflizmVujBOBrw5Ld804qsbF00Tl6uFtzjmQUPWWZ1b6LXo70ecMj9XAkyWhjMbqu26r2Lgu2jCCDhSdhICwGDodSMmaSsuuuNL2axtmg7WewXAFaqW52Ogj_PW1g',
    #     data=json.dumps({'type': 'webhook_test'}), headers=header)
    # response = json.loads(response.content, encoding='utf-8')
    # if isinstance(response, dict) and response.get('webhook_test'):
    #     print('OK')
    # b.add_from_api()
    #
    # b.add_from_api('')
    #
    # b.process_new_updates()
